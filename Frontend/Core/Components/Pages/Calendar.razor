@inherits Core.Components.BaseClassess.CustomComponentBase
@page "/calendar"
@using Microsoft.AspNetCore.Components.Web
@using Core.Components.Spinners
@using Core.Components.Dialogs

<h3 class="text-center my-4">Twój plan dnia</h3>

@if (IsDataLoaded)
{
	<div class="calendar-wrapper container">
		<div class="d-flex gap-2 justify-content-center align-items-center mb-3">
			<div class="input-group calendar-month-select">
				<span class="input-group-text">
					<i class="bi bi-calendar3"></i>
				</span>
				<InputSelect TValue="int"
							 Value="SelectedMonth"
							 ValueChanged="MonthChanged"
							 ValueExpression="@(() => SelectedMonth)"
							 class="form-select">
					@foreach (var month in Months)
					{
						<option value="@month.Key">@month.Value</option>
					}
				</InputSelect>
			</div>
			<button class="btn btn-outline-secondary" title="Odœwie¿" @onclick="RefreshData">
				<i class="bi bi-arrow-repeat"></i>
			</button>
		</div>

		<div id="calendar-scroll-days"
			 class="calendar-scroll-days"
			 @onmousedown="StartDrag"
			 @onmouseup="EndDrag"
			 @onmousemove="DragDays">
			@foreach (DateOnly day in DisplayedDateSpan.GetDaysBeetween())
			{
				<button id="day-@day.ToString("yyyy-MM-dd")" class="day-button @(day == SelectedDay ? "active" : "")"
						@onclick="() => SetSelectedDay(day)">
					<div>@GetDayString(day)</div>
				</button>
			}
		</div>

		<div class="task-list mt-4">
			@foreach (var calendarItem in CalendarItems.Where(x => DateOnly.FromDateTime(x.Time) == SelectedDay))
			{
				<div class="task-card">
					<div class="time">@calendarItem.Time.ToString("HH:mm")</div>
					<div class="content">
						<div class="name">@calendarItem.Title</div>
						<div class="description">@calendarItem.Description</div>
					</div>
					<div class="ms-auto d-flex align-items-center">
						<button class="btn notification-btn" title="Szczegó³y" @onclick="() => ShowItemDialog(calendarItem)">
							<i class="bi bi-three-dots"></i>
						</button>
					</div>
				</div>
			}
		</div>
	</div>

	<TemplatedDialog IsHidden="@IsItemDialogHidden" OnClose="CloseItemDialog">
		@if (SelectedItem != null)
		{
			<div class="text-center">
				<h5>@SelectedItem.Title</h5>
				<p>@SelectedItem.Description</p>
				<p class="text-muted">@SelectedItem.Time.ToString()</p>

				@if (SelectedItem.NotificationTime.HasValue)
				{
					<p>Przypomnienie o @SelectedItem.NotificationTime.Value.ToString()</p>
					<button class="btn btn-outline-danger mt-2" @onclick="() => RemoveNotification(SelectedItem.Id)">
						Usuñ przypomnienie
					</button>
				}
				else
				{
					<div class="mt-3">
						<label for="notificationTime">Ustaw przypomnienie:</label>
						<InputDate TValue="DateTime?" Type="InputDateType.DateTimeLocal" @bind-Value="NewNotificationTime" class="form-control mt-1 mb-2"  />
						<button class="btn btn-outline-primary" @onclick="() => SetNotification(SelectedItem.Id)">
							Ustaw przypomnienie
						</button>
					</div>
				}
			</div>
		}
	</TemplatedDialog>

}
else
{
	<Spinner />
}
